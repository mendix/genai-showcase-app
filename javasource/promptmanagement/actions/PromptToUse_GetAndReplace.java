// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package promptmanagement.actions;

import static java.util.Objects.requireNonNull;
import java.util.List;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import promptmanagement.impl.MxLogger;
import promptmanagement.proxies.ModelEntity;
import promptmanagement.proxies.Prompt;
import promptmanagement.proxies.PromptToUse;
import promptmanagement.proxies.Variable;
import promptmanagement.proxies.Version;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * Use this action to get a prompt that was configured in the app by passing the prompt's name. If you pass an object, all variables that match the prompt's variables are replaced with the actual values extracted from the attributes with the exact same name as a variable.
 * 
 * 
 * Output:
 * -PromptToUse: object that contains the system and user prompt which you can use to pass the prompts to the request.
 */
public class PromptToUse_GetAndReplace extends CustomJavaAction<IMendixObject>
{
	private java.lang.String PromptName;
	private IMendixObject VariablesObject;

	public PromptToUse_GetAndReplace(IContext context, java.lang.String PromptName, IMendixObject VariablesObject)
	{
		super(context);
		this.PromptName = PromptName;
		this.VariablesObject = VariablesObject;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		try {
			requireNonNull(PromptName, "PromptName is required.");
			
			PromptToUse promptToUse = new PromptToUse(getContext());
			
			// get Version In Use (alternatively Draft) and set values
			Version versionInUse = promptmanagement.proxies.microflows.Microflows.version_GetForPromptTitle(
					getContext(), PromptName);
			promptToUse.setPromptToUse_Version(versionInUse);
			promptToUse.setSystemPrompt(versionInUse.getSystemPrompt());
			promptToUse.setUserPrompt(versionInUse.getUserPrompt());
			
			// if a VariablesObject was passed, replace the placeholders with actual values.
			if(VariablesObject != null) {
				IMendixObject prompt =  Core.retrieveByPath(getContext(), versionInUse.getMendixObject(),  "PromptManagement.Version_Prompt").get(0); 
				
				//Get associated modelEntity (check if list is not empty)
				List<IMendixObject> modelEntityList = Core.retrieveByPath(getContext(),prompt,"PromptManagement.Prompt_ModelEntity");
				if(!modelEntityList.isEmpty()) {
					ModelEntity modelEntity = promptmanagement.proxies.ModelEntity.load(getContext(), modelEntityList.get(0).getId());
					
					//Check if modelEntity matches the passed obhect's entity
					if (VariablesObject.getMetaObject().getName().equals(modelEntity.getName())) {
						//Get all variables associated to the Prompt and replace placeholders with values from attributes.
						List<IMendixObject> variableList =  Core.retrieveByPath(getContext(),prompt, "PromptManagement.Variable_Prompt");
						replaceVariables(promptToUse, variableList, VariablesObject);
					}
					else {
						throw new IllegalArgumentException("Cannot replace variables for the passed VariablesObject because it does not match the entity that is selected for this prompt."
								+ " Passed object's entity: " + VariablesObject.getMetaObject().getName() + ", expected: " + modelEntity.getName());
					}
				}
				else {
					throw new IllegalArgumentException("Cannot replace variables for the passed VariablesObject because no entity is selected for this prompt.");
				}
			}
			
			return promptToUse.getMendixObject();
			
			
			} catch (Exception e) {
				LOGGER.error(e.getMessage());
				throw e;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "PromptToUse_GetAndReplace";
	}

	// BEGIN EXTRA CODE
	private static final MxLogger LOGGER = new MxLogger(PromptToUse_GetAndReplace.class);
	
	private void replaceVariables(PromptToUse promptToUse, List<IMendixObject> variableList, IMendixObject VariablesObject) throws CoreException {
		
		for(IMendixObject variableIterator : variableList) {
			Variable variable = promptmanagement.proxies.Variable.load(getContext(), variableIterator.getId());
			
			if (!VariablesObject.hasMember(variable.getKey())) {
				LOGGER.warn("Cannot replace variable {{" + variable.getKey() + "}} because it is not found in the passed object.");
				continue;
			}
			
			if(VariablesObject.getValue(getContext(), variable.getKey()) != null) {
				promptmanagement.proxies.microflows.Microflows.promptToUse_ApplyVariable(getContext(), promptToUse,  
						variable.getKey(), VariablesObject.getValue(getContext(), variable.getKey()).toString());
			}
			else {
				LOGGER.warn("Cannot replace variable {{" + variable.getKey() + "}} because it is empty in the passed object.");
			}
		}

	}
	// END EXTRA CODE
}
