// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package genaicommons.actions;

import static java.util.Objects.requireNonNull;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import genaicommons.impl.DeployedModelImpl;
import genaicommons.impl.MxLogger;
import genaicommons.proxies.DeployedModel;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class DeployedModel_Create extends CustomJavaAction<IMendixObject>
{
	private java.lang.String DisplayName;
	private java.lang.String Architecture;
	private java.lang.String Model;
	private genaicommons.proxies.ENUM_ModelType ModelType;
	private java.lang.String ChatCompletionsMicroflow;
	private java.lang.String DeployedModelSpecialization;

	public DeployedModel_Create(IContext context, java.lang.String DisplayName, java.lang.String Architecture, java.lang.String Model, java.lang.String ModelType, java.lang.String ChatCompletionsMicroflow, java.lang.String DeployedModelSpecialization)
	{
		super(context);
		this.DisplayName = DisplayName;
		this.Architecture = Architecture;
		this.Model = Model;
		this.ModelType = ModelType == null ? null : genaicommons.proxies.ENUM_ModelType.valueOf(ModelType);
		this.ChatCompletionsMicroflow = ChatCompletionsMicroflow;
		this.DeployedModelSpecialization = DeployedModelSpecialization;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		try {
			validate();
			
			return createAndSetDeployedModel().getMendixObject();
			
		} catch (Exception e) {
			LOGGER.error(e);
			throw e;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "DeployedModel_Create";
	}

	// BEGIN EXTRA CODE
	private static final MxLogger LOGGER = new MxLogger(DeployedModel_Create.class);
	
	private DeployedModel createAndSetDeployedModel() {
		// Create an instance of the specialized ProviderConfig object
		IMendixObject deployedModelSpecialization = Core.instantiate(getContext(), DeployedModelSpecialization);
		validateDeployedModelSpecialization(deployedModelSpecialization);

		// Use the specialized proxy class to wrap the generic IMendixObject to set attributes
		DeployedModel deployedModel = DeployedModel.initialize(getContext(), deployedModelSpecialization);
		deployedModel.setArchitecture(Architecture);
		deployedModel.setChatCompletionsMicroflow(ChatCompletionsMicroflow);
		deployedModel.setDisplayName(DisplayName);
		deployedModel.setModel(Model);
		deployedModel.setModelType(ModelType);
		return deployedModel;
	}
	
	private void validate() {
		validateInputParameters();
		DeployedModelImpl.validateChatCompletionsMicroflow(ChatCompletionsMicroflow);
	}
	
	private void validateInputParameters() {
		requireNonNull(DisplayName, "DisplayName is required.");
		requireNonNull(Model, "Model is required.");
		requireNonNull(Architecture, "Architecture is required.");
		requireNonNull(ModelType, "ModelType is required.");
		requireNonNull(DeployedModelSpecialization, "DeployedModelSpecialization is required.");
	}
	
	private void validateDeployedModelSpecialization(IMendixObject deployedModelSpecialization) {
		if (!deployedModelSpecialization.isInstanceOf(DeployedModel.entityName)){
			throw new IllegalArgumentException(DeployedModel.entityName + " or a specialization of such is required.");
		}
	}
	// END EXTRA CODE
}
