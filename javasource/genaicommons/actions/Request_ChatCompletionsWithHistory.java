// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package genaicommons.actions;

import static java.util.Objects.requireNonNull;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import genaicommons.impl.DeployedModelImpl;
import genaicommons.impl.MxLogger;
import genaicommons.proxies.Response;
import genaicommons.proxies.microflows.Microflows;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Request_ChatCompletionsWithHistory extends CustomJavaAction<IMendixObject>
{
	private IMendixObject __Request;
	private genaicommons.proxies.Request Request;
	private IMendixObject __DeployedModel;
	private genaicommons.proxies.DeployedModel DeployedModel;

	public Request_ChatCompletionsWithHistory(IContext context, IMendixObject Request, IMendixObject DeployedModel)
	{
		super(context);
		this.__Request = Request;
		this.__DeployedModel = DeployedModel;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		this.Request = this.__Request == null ? null : genaicommons.proxies.Request.initialize(getContext(), __Request);

		this.DeployedModel = this.__DeployedModel == null ? null : genaicommons.proxies.DeployedModel.initialize(getContext(), __DeployedModel);

		// BEGIN USER CODE
		try {
			requireNonNull(Request, "Request is required.");
			requireNonNull(DeployedModel, "DeployedModel is required.");
			String chatCompletionsMicroflow = DeployedModel.getChatCompletionsMicroflow();
			DeployedModelImpl.validateChatCompletionsMicroflow(chatCompletionsMicroflow);
			startTime = System.currentTimeMillis();
			return processRequest(chatCompletionsMicroflow).getMendixObject();
		} catch (Exception e) {
			LOGGER.error(e);
			throw e;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Request_ChatCompletionsWithHistory";
	}

	// BEGIN EXTRA CODE
	private static final MxLogger LOGGER = new MxLogger(Request_ChatCompletionsWithHistory.class);
	
	private int totalTokens = 0;
	private int requestTokens = 0;
	private int responseTokens = 0;
	private long startTime;
	
	//Recursive response processing until there is no ToolCall available
	private Response processRequest(String chatCompletionsMicroflow) throws CoreException {
		IMendixObject responseMendixObject = Core.microflowCall(chatCompletionsMicroflow).withParam("DeployedModel", DeployedModel.getMendixObject()).withParam("Request", Request.getMendixObject()).execute(this.getContext());
		if(responseMendixObject == null) {
			throw new NullPointerException("Microflow " + chatCompletionsMicroflow + " returned null.");
		}
		Response response = genaicommons.proxies.Response.load(getContext(), responseMendixObject.getId());
		
		responseUpdateTokenCount(response);
		
		boolean toolCallsProcessed = Microflows.response_ProcessToolCalls(getContext(), response, Request);
		
		//Recursion if tool calls are available
		if (toolCallsProcessed) {
			return processRequest(chatCompletionsMicroflow);
		}
		
		responseStoreDurationAndUsage(response);
		return response;
	}

	private void responseStoreDurationAndUsage(Response response) {
		String deploymentIdentifier = DeployedModel.getArchitecture() + " " + DeployedModel.getModel();
		response.setDurationMilliseconds((int) Math.ceil(System.currentTimeMillis() - startTime));
		if (genaicommons.proxies.constants.Constants.getStoreUsageMetrics()) {
			Microflows.usage_Create_TextAndFiles(getContext(), response, deploymentIdentifier);
		}
	}
		
	private void responseUpdateTokenCount(Response response) {
		requestTokens += response.getRequestTokens();
		responseTokens += response.getResponseTokens();
		totalTokens += response.getTotalTokens();
		response.setRequestTokens(requestTokens);
		response.setResponseTokens(responseTokens);
		response.setTotalTokens(totalTokens);
	}
	// END EXTRA CODE
}
