// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package genaicommons.actions;

import java.util.Map;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IDataType;
import com.mendix.webui.CustomJavaAction;
import genaicommons.impl.DeployedModelImpl;
import genaicommons.impl.MxLogger;
import genaicommons.proxies.ENUM_ModelType;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * Use this microflow operation to execute an image generations API call based on a prompt string input. The Response object needs to be processed to create a single or multiple images.
 * 
 * Inputs:
 * - DeployedModel: The DeployedModel entity replaces the Connection entity for all chat completion operations. It contains the name of the microflow to be executed for the specified model and other information relevant to connect to a model. The ModelType needs to be of type text generation.
 * - UserPrompt: String that describes the content of the image that is generated.
 * - ImageOptions (optional): This can be used to pass optional request attributes.
 * 
 * Outputs:
 * - Response: This is a Response object pointing to a message with a FileCollection containing one or multiple FileContent objects. These FileContent objects can be converted into a single or multiple images using the response handling microflows.
 */
public class ImageGenerations extends CustomJavaAction<IMendixObject>
{
	private java.lang.String UserPrompt;
	private IMendixObject __DeployedModel;
	private genaicommons.proxies.DeployedModel DeployedModel;
	private IMendixObject __ImageOptions;
	private genaicommons.proxies.ImageOptions ImageOptions;

	public ImageGenerations(IContext context, java.lang.String UserPrompt, IMendixObject DeployedModel, IMendixObject ImageOptions)
	{
		super(context);
		this.UserPrompt = UserPrompt;
		this.__DeployedModel = DeployedModel;
		this.__ImageOptions = ImageOptions;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		this.DeployedModel = this.__DeployedModel == null ? null : genaicommons.proxies.DeployedModel.initialize(getContext(), __DeployedModel);

		this.ImageOptions = this.__ImageOptions == null ? null : genaicommons.proxies.ImageOptions.initialize(getContext(), __ImageOptions);

		// BEGIN USER CODE
		try {
			validate();
			return Core.microflowCall(DeployedModel.getMicroflow())
					.withParams(mapInputParameters())
					.execute(this.getContext());

		} catch (Exception e) {
			LOGGER.error(e);
			throw e;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ImageGenerations";
	}

	// BEGIN EXTRA CODE
	private static final MxLogger LOGGER = new MxLogger(ImageGenerations.class);
	
	private void validate() {
		if (UserPrompt == null || UserPrompt.isBlank()) {
			throw new IllegalArgumentException("UserPrompt is required.");
		}
		DeployedModelImpl.validate(DeployedModel, ENUM_ModelType.ImageGeneration);
	}
	
	private Map<String, Object> mapInputParameters() {
		Map<String, Object> inputParameters = new java.util.HashMap<>();
		Map<String, IDataType> parametersAndTypes = Core.getInputParameters(DeployedModel.getMicroflow());
		parametersAndTypes.forEach((t, u) -> {
			if(u.getType().equals(IDataType.DataTypeEnum.String)) {
				inputParameters.put(t, UserPrompt);
			} else if(Core.getMetaObject(u.getObjectType()).isSubClassOf(genaicommons.proxies.DeployedModel.getType())) {
				inputParameters.put(t, DeployedModel.getMendixObject());
			} else if(ImageOptions != null && Core.getMetaObject(u.getObjectType()).isSubClassOf(genaicommons.proxies.ImageOptions.getType())) {
				inputParameters.put(t, ImageOptions.getMendixObject());
			}
			
		}
		);
		return inputParameters;
	}
	
	// END EXTRA CODE
}
