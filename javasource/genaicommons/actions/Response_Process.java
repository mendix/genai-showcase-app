// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package genaicommons.actions;

import org.checkerframework.checker.initialization.qual.Initialized;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import genaicommons.proxies.Response;
import genaicommons.proxies.microflows.Microflows;
import genaicommons.impl.MxLogger;
import genaicommons.proxies.Connection;

public class Response_Process extends CustomJavaAction<IMendixObject>
{
	private java.lang.String MicroflowToExecuteRequest;
	private IMendixObject __Request;
	private genaicommons.proxies.Request Request;
	private IMendixObject __Response;
	private genaicommons.proxies.Response Response;
	private IMendixObject __Connection;
	private genaicommons.proxies.Connection Connection;

	public Response_Process(IContext context, java.lang.String MicroflowToExecuteRequest, IMendixObject Request, IMendixObject Response, IMendixObject Connection)
	{
		super(context);
		this.MicroflowToExecuteRequest = MicroflowToExecuteRequest;
		this.__Request = Request;
		this.__Response = Response;
		this.__Connection = Connection;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		this.Request = this.__Request == null ? null : genaicommons.proxies.Request.initialize(getContext(), __Request);

		this.Response = this.__Response == null ? null : genaicommons.proxies.Response.initialize(getContext(), __Response);

		this.Connection = this.__Connection == null ? null : genaicommons.proxies.Connection.initialize(getContext(), __Connection);

		// BEGIN USER CODE
		
		
		//Validations TBD
		
		//Returns true if there is a ToolCall
		boolean toolCallAvailable = Microflows.response_PrepareRequestForFunctionCalling(getContext(), Response, Request, Connection);
		
		//Return the response if there is no ToolCall available
		if (toolCallAvailable == false) {
			return Response.getMendixObject();
		}
		
		responseUpdateTokenCount(Response);
		
		//Needed in order to pass to MicroflowToExecuteRequest
		IMendixObject connectionToPass = Connection.getMendixObject();
		IMendixObject requestToPass = Request.getMendixObject();
		
		while(toolCallAvailable) {
			//Execute LLM call
			IMendixObject responseMendixObject = Core.microflowCall(MicroflowToExecuteRequest).withParam("Connection", connectionToPass).withParam("Request", requestToPass).execute(getContext());
			Response responseToolCall = Response.initialize(getContext(), responseMendixObject);
			responseUpdateTokenCount(responseToolCall);
			
			//Prepare next Request for tool call if needed
			if (responseMendixObject != null) {
				toolCallAvailable = Core.microflowCall("GenAICommons.Response_PrepareRequestForFunctionCalling").withParam("Response", responseMendixObject).withParam("Request", requestToPass).withParam("Connection", connectionToPass).execute(getContext());
			}
			
			//Return latest Response if no ToolCalls are requested
			if(toolCallAvailable == false) {
				return responseToolCall.getMendixObject();
			}
		}
		return null;		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Response_Process";
	}

	// BEGIN EXTRA CODE
	private static final MxLogger LOGGER = new MxLogger(Response_Process.class);
	
	private int totalTokens = 0;
	private int requestTokens = 0;
	private int responseTokens = 0;
	
	private void responseUpdateTokenCount(Response response) {
		requestTokens += response.getRequestTokens();
		responseTokens += response.getResponseTokens();
		totalTokens += response.getTotalTokens();
		response.setRequestTokens(requestTokens);
		response.setResponseTokens(responseTokens);
		response.setTotalTokens(totalTokens);
		LOGGER.info("Request: " +requestTokens+ ", response: "+ responseTokens + ", total: " + totalTokens);
	}
	// END EXTRA CODE
}
