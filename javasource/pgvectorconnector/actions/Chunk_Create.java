// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package pgvectorconnector.actions;

import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import communitycommons.StringUtils;
import pgvectorconnector.proxies.Chunk;
import pgvectorconnector.impl.ChunkImpl;
import pgvectorconnector.impl.MxLogger;

public class Chunk_Create extends CustomJavaAction<java.lang.Void>
{
	private java.util.List<IMendixObject> __ChunkList;
	private java.util.List<pgvectorconnector.proxies.Chunk> ChunkList;
	private java.lang.String HumanReadableID;
	private java.lang.String Vector;
	private pgvectorconnector.proxies.ENUM_ChunkType ChunkType;
	private java.lang.String Key;
	private java.lang.String Value;
	private IMendixObject MxObject;
	private java.util.List<IMendixObject> __LabelList;
	private java.util.List<pgvectorconnector.proxies.Label> LabelList;

	public Chunk_Create(IContext context, java.util.List<IMendixObject> ChunkList, java.lang.String HumanReadableID, java.lang.String Vector, java.lang.String ChunkType, java.lang.String Key, java.lang.String Value, IMendixObject MxObject, java.util.List<IMendixObject> LabelList)
	{
		super(context);
		this.__ChunkList = ChunkList;
		this.HumanReadableID = HumanReadableID;
		this.Vector = Vector;
		this.ChunkType = ChunkType == null ? null : pgvectorconnector.proxies.ENUM_ChunkType.valueOf(ChunkType);
		this.Key = Key;
		this.Value = Value;
		this.MxObject = MxObject;
		this.__LabelList = LabelList;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		this.ChunkList = java.util.Optional.ofNullable(this.__ChunkList)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(__ChunkListElement -> pgvectorconnector.proxies.Chunk.initialize(getContext(), __ChunkListElement))
			.collect(java.util.stream.Collectors.toList());

		this.LabelList = java.util.Optional.ofNullable(this.__LabelList)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(__LabelListElement -> pgvectorconnector.proxies.Label.initialize(getContext(), __LabelListElement))
			.collect(java.util.stream.Collectors.toList());

		// BEGIN USER CODE
		try {
			ChunkImpl.validate(ChunkList, HumanReadableID, Vector, ChunkType, Key, Value); //To Remove?
			
			Chunk chunk = new Chunk(getContext());
			chunk.setChunkID(getContext(), StringUtils.randomHash());
			chunk.setHumanReadableID(getContext(), HumanReadableID);
			chunk.setVector(getContext(), Vector);
			chunk.setChunkType(getContext(), ChunkType);
			chunk.setKey(getContext(), Key);
			chunk.setValue(getContext(), ChunkType.equals(pgvectorconnector.proxies.ENUM_ChunkType.KeyValue) ? Value : null);
			chunk.setMxObjectID(getContext(), MxObject == null ? null : MxObject.getId().toString());
			chunk.setMxEntity(getContext(), MxObject == null ? null : MxObject.getType());
			
			LabelList.forEach(label -> label.setLabel_Chunk(getContext(), chunk));
			
			ChunkList.add(chunk);
			
			return null;
			
			} catch (Exception e) {
				LOGGER.error(e.getMessage());
				throw e;
			}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Chunk_Create";
	}

	// BEGIN EXTRA CODE
	private static final MxLogger LOGGER = new MxLogger(Chunk_Create.class);
	// END EXTRA CODE
}
