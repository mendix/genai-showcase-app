// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package amazonbedrockconnector.actions;

import static java.util.Objects.requireNonNull;
import java.util.Map;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IDataType;
import com.mendix.webui.CustomJavaAction;
import amazonbedrockconnector.genaicommons_impl.FunctionImpl;
import amazonbedrockconnector.genaicommons_impl.MappingUtilsImpl;
import amazonbedrockconnector.impl.MxLogger;
import amazonbedrockconnector.proxies.ENUM_MessageType_AnthropicClaude;

public class JA_AnthropicClaude_ModifyJson_Request extends CustomJavaAction<java.lang.String>
{
	private java.lang.String RequestBody_ToBeModified;

	public JA_AnthropicClaude_ModifyJson_Request(IContext context, java.lang.String RequestBody_ToBeModified)
	{
		super(context);
		this.RequestBody_ToBeModified = RequestBody_ToBeModified;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		try {
			requireNonNull(this.RequestBody_ToBeModified, "RequestBody String is required");
			
			ObjectNode rootNode = (ObjectNode) MAPPER.readTree(RequestBody_ToBeModified);
			
			modifyMessageNodes(rootNode);
			modifyToolNode(rootNode);
			
			LOGGER.debug("modified Json: " + rootNode);
			return MAPPER.writeValueAsString(rootNode);		
		} catch (Exception e) {
			LOGGER.error("Error occurred while modifying Claude request body: " + e.getMessage());
			throw e;
		}
		
		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_AnthropicClaude_ModifyJson_Request";
	}

	// BEGIN EXTRA CODE
	private static final MxLogger LOGGER = new MxLogger(JA_AnthropicClaude_ModifyJson_Request.class);
	private static final ObjectMapper MAPPER = new ObjectMapper();
	
	private void modifyMessageNodes(ObjectNode rootNode) throws JsonMappingException, JsonProcessingException {
		// messages Node
		ArrayNode messagesNode = (ArrayNode) rootNode.get("messages");
		
		boolean requiresToolPostProcessing = false;
		
		for (JsonNode messageNode : messagesNode) {
			
			// Message Object 
			ObjectNode message = (ObjectNode) messageNode;
			
			// Case 1: ImageCollection with FileContent passed -> User wants to send an image to claude
			if (message.has("imageCollection")) {
				ArrayNode imageCollectionsNode = (ArrayNode) message.get("imageCollection");
				if (imageCollectionsNode.size() > 0) {
					
					// Get the content array for passing images
					ArrayNode newContentNode = getImageContentNode(imageCollectionsNode, message);
					
					// replacing content and removing obsolete fields
					replaceContent(newContentNode, message);
					cleanMessageNode(message);
					continue;
				}				
			}
			
			
			// Case 2: ToolCall(s) passed -> Claude wants to execute a tool, this is passed to history of the request
			if (message.has("toolCall")) {
				
				ArrayNode toolCallNode = (ArrayNode) message.get("toolCall");
				
				if (toolCallNode.size() > 0) {
					
					// Get the content array for the tool_use 
					ArrayNode newContentNode = getToolCallContentNode(toolCallNode, message);
					
					// replacing content and removing obsolete fields
					replaceContent(newContentNode, message); 
					cleanMessageNode(message);
					continue;			
				}
			}
			
			// Case 3: A requested tool was executed -> The result of the tool is sent to Claude
			if (message.has("toolCallId")) {
				String toolCallId = message.get("toolCallId").asText();
				if (toolCallId != null && !toolCallId.isBlank()) {
					
					// Get the content for the tool_result
					ArrayNode newContentNode = getToolResultContentNode(toolCallId, message);
					
					// A tool result message was added
					// Enable post processing
					// Claude needs all subsequent tool_results as part of a single message
					requiresToolPostProcessing = true;
					
					// replacing content and removing obsolete fields
					replaceContent(newContentNode, message);
					cleanMessageNode(message);
					continue;
				}
			}
			
			// Case: None of the above -> standard text message with content as field
			cleanMessageNode(message);
				
		}
		
		// Merging all subsequent tool_result messages into one
		if (requiresToolPostProcessing) {
			mergeUserToolResultContentMessages(messagesNode);
		}
		
	}
	
	private ArrayNode getImageContentNode(ArrayNode imageCollectionsNode, ObjectNode message) {
		
		ArrayNode newContentNode = MAPPER.createArrayNode();
		
		for (JsonNode imageCollectionNode : imageCollectionsNode) {
			
			// Add a the TextContent prior to the image
			if (imageCollectionNode.has("textContent")) {
				String textContent = imageCollectionNode.get("textContent").asText();
				if (textContent != null && !textContent.isBlank()) {
					addTextNode(textContent, newContentNode);
				}
			}	
			// transforming the ImageCollection into the correct format
			addImageNode(imageCollectionNode, newContentNode);
		}
		
		// If present, add the text content from the Message.Content attribute.	
		if (message.has("content")) {
			String messageContent = message.get("content").asText();
			if (messageContent != null && !messageContent.isBlank()) {
				addTextNode(messageContent, newContentNode);
			}
		}
		
		return newContentNode;
	}
	
	private ArrayNode getToolCallContentNode(ArrayNode toolCallNode, ObjectNode message) throws JsonMappingException, JsonProcessingException {
		ArrayNode newContentNode = MAPPER.createArrayNode();
		
		for (JsonNode toolCall : toolCallNode) {
			
			ObjectNode toolCall_formatted = MAPPER.createObjectNode();
			
			toolCall_formatted.put("type", "tool_use");
			
			String toolCallId = toolCall.get("id").asText();
			toolCall_formatted.put("id", toolCallId);
			
			String name = toolCall.get("name").asText();
			toolCall_formatted.put("name", name);
			
			String arguments = toolCall.get("arguments").asText();
			JsonNode input = MAPPER.readTree(arguments);
			toolCall_formatted.set("input", input);
			
			newContentNode.add(toolCall_formatted);
			
		}
		
		return newContentNode;
	}
	
	private ArrayNode getToolResultContentNode(String toolCallId, ObjectNode message) {
		ArrayNode newContentNode = MAPPER.createArrayNode();
		
		ObjectNode tool_result = MAPPER.createObjectNode();
		
		tool_result.put("type", "tool_result");
		tool_result.put("tool_use_id", toolCallId);
		
		String content = message.get("content").asText();
		tool_result.put("content", content);
		
		newContentNode.add(tool_result);
		
		return newContentNode;
	}
	
	private void replaceContent(ArrayNode newContentNode, ObjectNode message) {
		message.remove("content");
		message.set("content", newContentNode);
	}
	
	private void cleanMessageNode(ObjectNode message) {
		message.remove("imageCollection");
		message.remove("toolCall");
		message.remove("toolCallId");
	}
	
	
	// This method looks for subsequent tool_result messages and combines them into one to match Claudes expected format
	// It calls recursively the AddFollowingToolResults method until no subsequent tool_result is found. 
	private void mergeUserToolResultContentMessages(ArrayNode messagesNode) {
		LOGGER.debug("merge method called");
		for (int i = 0; i < messagesNode.size(); i++) {	
			ObjectNode message = (ObjectNode) messagesNode.get(i);
			
			if (isToolResultNode(message)) {
				LOGGER.debug("ToolResult First message: " + message);
				ArrayNode messageContentToAlter = (ArrayNode) message.get("content");
				
				addFollowingToolResults(messagesNode, messageContentToAlter, i + 1);			
				LOGGER.debug("New MessageContent " + messageContentToAlter);
			}
			
		}
	}
	
	private boolean isToolResultNode(ObjectNode message) {
		if (message.get("role").asText().equals("user") &&
				message.has("content") && 
				message.get("content").isArray() &&
				message.get("content").get(0).has("type") &&
				message.get("content").get(0).get("type").asText().equals("tool_result")) {
			return true;
		}
		return false;
		
	}
	
	// If a subsequent tool_result message is found, its content is appended to the previous tool_result message
	// The subsequent tool_result message is removed
	// Then the next message is checked
	private void addFollowingToolResults(ArrayNode messagesNode, ArrayNode messageContentToAlter, int nextMessageIndex) {
		
		if (nextMessageIndex < messagesNode.size()) {
			
			ObjectNode nextMessage = (ObjectNode) messagesNode.get(nextMessageIndex);
			
			if (isToolResultNode(nextMessage)) {
				LOGGER.debug("ToolResult Next message found: " + nextMessage);
				ObjectNode nextMessageToolResult = (ObjectNode) nextMessage.get("content").get(0);
				messageContentToAlter.add(nextMessageToolResult);
				messagesNode.remove(nextMessageIndex);
				addFollowingToolResults(messagesNode, messageContentToAlter, nextMessageIndex);
			}
			
		}		
	}
	
	private void addTextNode(String text, ArrayNode contentNode) {
		ObjectNode newTextNode = MAPPER.createObjectNode();
		newTextNode.put("type", ENUM_MessageType_AnthropicClaude.text.toString());
		newTextNode.put("text", text);
		
		contentNode.add(newTextNode);
	}
	
	private void addImageNode(JsonNode imageCollectionNode, ArrayNode contentNode) {
		ObjectNode newImageNode = MAPPER.createObjectNode();
		newImageNode.put("type", ENUM_MessageType_AnthropicClaude.image.toString());
		ObjectNode sourceNode = MAPPER.createObjectNode();
		sourceNode.put("type", "base64");
		sourceNode.put("media_type", getAttributeFromNode(imageCollectionNode,"mediaType"));
		sourceNode.put("data", getAttributeFromNode(imageCollectionNode,"fileContent"));
		newImageNode.set("source", sourceNode);
		
		contentNode.add(newImageNode);
	}
	
	private String getAttributeFromNode(JsonNode node, String attributeName) {
		if(!node.has(attributeName)) {
			LOGGER.error("Request FileContent is missing required attribute: " + attributeName);
			throw new IllegalArgumentException("Request FileContent is missing required attribute: " + attributeName);
		}
		String value = node.get(attributeName).asText();
		if (value.equals("image/jpg")) {
			value = "image/jpeg";
		}
		
		return value;
		
	}
	
	private void modifyToolNode(ObjectNode rootNode) {
		if (rootNode.has("tools")) {
			
			ArrayNode toolNode = (ArrayNode) rootNode.get("tools");
			
			for (JsonNode t : toolNode) {
				ObjectNode tool = (ObjectNode) t;
				
				String mfName = tool.get("microflowName").asText();
				ObjectNode inputSchemaNode = MappingUtilsImpl.createFunctionParametersNode(mfName, MAPPER);
				
				tool.set("input_schema", inputSchemaNode);
				tool.remove("microflowName");
			}
			
		}
		
		
	}
	
	
	// END EXTRA CODE
}
