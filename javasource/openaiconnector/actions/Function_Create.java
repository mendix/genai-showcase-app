// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package openaiconnector.actions;

import static java.util.Objects.requireNonNull;
import java.util.regex.*;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import openaiconnector.impl.MxLogger;
import openaiconnector.proxies.Function;

public class Function_Create extends CustomJavaAction<IMendixObject>
{
	private java.lang.String Name;
	private java.lang.String ActionMicroflow;
	private IMendixObject __FunctionCalling;
	private openaiconnector.proxies.FunctionCalling FunctionCalling;
	private java.lang.String Description;

	public Function_Create(IContext context, java.lang.String Name, java.lang.String ActionMicroflow, IMendixObject FunctionCalling, java.lang.String Description)
	{
		super(context);
		this.Name = Name;
		this.ActionMicroflow = ActionMicroflow;
		this.__FunctionCalling = FunctionCalling;
		this.Description = Description;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		this.FunctionCalling = this.__FunctionCalling == null ? null : openaiconnector.proxies.FunctionCalling.initialize(getContext(), __FunctionCalling);

		// BEGIN USER CODE
		try{
			validateInput();
			
			Function function = new Function(getContext());
			function.setActionMicroflow(ActionMicroflow);
			function.setName(Name);	
			function.setDescription(Description); //Optional parameter
			function.setFunction_FunctionCalling(FunctionCalling);
			
			return function.getMendixObject();
		
		} catch (Exception e) {
			LOGGER.error(e.getMessage());
			throw e;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Function_Create";
	}

	// BEGIN EXTRA CODE
	private static final MxLogger LOGGER = new MxLogger(Function_Create.class);
	
	private void validateInput() throws Exception {
		requireNonNull(ActionMicroflow, "ActionMicroflow is required.");
		requireNonNull(Name, "Name is required.");
		requireNonNull(FunctionCalling, "FunctionCalling object is required.");
		
		if(!isValidName()) {
			throw new IllegalArgumentException("Function Name is not valid. Name must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.");
		}
	}
	
	private boolean isValidName() {
	    // Name must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64
	    String pattern = "^[a-zA-Z0-9_-]{1,64}$";

	    // Compile the pattern into a regular expression
	    Pattern regex = Pattern.compile(pattern);

	    // Create a matcher with the input string (Name)
	    Matcher matcher = regex.matcher(Name);

	    // Check if the input string matches the pattern
	    return matcher.matches();
	}
	// END EXTRA CODE
}
