// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package openaiconnector.actions;

import static java.util.Objects.requireNonNull;
import java.util.regex.*;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import openaiconnector.impl.MxLogger;
import openaiconnector.impl.FunctionImpl;
import openaiconnector.proxies.Function;

public class FunctionCalling_CreateWithFunctionAndParameters extends CustomJavaAction<IMendixObject>
{
	private java.lang.String FunctionName;
	private java.lang.String FunctionMicroflow;
	private java.lang.String FunctionDescription;
	private java.lang.Boolean FunctionIsToolChoice;

	public FunctionCalling_CreateWithFunctionAndParameters(IContext context, java.lang.String FunctionName, java.lang.String FunctionMicroflow, java.lang.String FunctionDescription, java.lang.Boolean FunctionIsToolChoice)
	{
		super(context);
		this.FunctionName = FunctionName;
		this.FunctionMicroflow = FunctionMicroflow;
		this.FunctionDescription = FunctionDescription;
		this.FunctionIsToolChoice = FunctionIsToolChoice;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		try{
			validateInput();
			
			Function function = new Function(getContext());
			function.setFunctionMicroflow(FunctionMicroflow);
			function.setName(FunctionName);	
			function.setDescription(FunctionDescription); //Optional parameter
			//function.setFunction_FunctionCalling(FunctionCalling);
			
			return function.getMendixObject();
		
		} catch (Exception e) {
			LOGGER.error(e.getMessage());
			throw e;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "FunctionCalling_CreateWithFunctionAndParameters";
	}

	// BEGIN EXTRA CODE
	private static final MxLogger LOGGER = new MxLogger(Function_Create.class);
	
	private void validateInput() throws Exception {
		requireNonNull(FunctionMicroflow, "FunctionMicroflow is required.");
		requireNonNull(FunctionName, "Name is required.");
		//requireNonNull(FunctionCalling, "FunctionCalling object is required.");
		validateFunctionName();
		FunctionImpl.validateFunctionMicroflow(FunctionMicroflow);
	}
		
	
	private void validateFunctionName() {
	    // Name must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64
	    String pattern = "^[a-zA-Z0-9_-]{1,64}$";

	    // Compile the pattern into a regular expression
	    Pattern regex = Pattern.compile(pattern);

	    // Create a matcher with the input string (Name)
	    Matcher matcher = regex.matcher(FunctionName);

	    // Check if the input string matches the pattern
	    if(!matcher.matches()) {
	    	throw new IllegalArgumentException("Function Name is not valid. Name must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.");
	    }
	}
	// END EXTRA CODE
}
