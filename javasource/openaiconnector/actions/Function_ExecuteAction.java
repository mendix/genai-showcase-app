// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package openaiconnector.actions;

import static java.util.Objects.requireNonNull;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IDataType;
import com.mendix.webui.CustomJavaAction;
import openaiconnector.impl.FunctionImpl;
import openaiconnector.impl.MxLogger;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Function_ExecuteAction extends CustomJavaAction<java.lang.String>
{
	private IMendixObject __Function;
	private openaiconnector.proxies.Function Function;
	private java.lang.String StringArgument;

	public Function_ExecuteAction(IContext context, IMendixObject Function, java.lang.String StringArgument)
	{
		super(context);
		this.__Function = Function;
		this.StringArgument = StringArgument;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		this.Function = this.__Function == null ? null : openaiconnector.proxies.Function.initialize(getContext(), __Function);

		// BEGIN USER CODE
		try {
			requireNonNull(Function, "Function is required.");
			requireNonNull(Function.getFunctionMicroflow(), "Function has no FunctionMicroflow.");
			FunctionImpl.validateFunctionMicroflow(Function.getFunctionMicroflow());
			
			String inputParamName = getInputParamName();
			LOGGER.info("Calling microflow ", Function.getFunctionMicroflow(), " with input parameter ", inputParamName, ": ", StringArgument, " with ", this.context(), ".");
			return Core.microflowCall(Function.getFunctionMicroflow()).withParam(inputParamName, StringArgument).execute(this.getContext());
		
		} catch (Exception e) {
			LOGGER.error(e.getMessage());
			throw e;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Function_ExecuteAction";
	}

	// BEGIN EXTRA CODE
	private static final MxLogger LOGGER = new MxLogger(Function_ExecuteAction.class);
	
	private String getInputParamName() {
		Map<String, IDataType> inputParameters = Core.getInputParameters(Function.getFunctionMicroflow());
		return inputParameters.entrySet().iterator().next().getKey();
	}
	
	// END EXTRA CODE
}
