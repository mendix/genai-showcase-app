// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package synthiaconnector.actions;

import static java.util.Objects.requireNonNull;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import genaicommons.proxies.ENUM_FileType;
import genaicommons.proxies.ENUM_MessageRole;
import synthiaconnector.impl.MxLogger;
import synthiaconnector.impl.ConverseVision;
import synthiaconnector.impl.ConverseFunctionCalling;

public class Request_Modify_Converse extends CustomJavaAction<java.lang.String>
{
	private IMendixObject __Request;
	private genaicommons.proxies.Request Request;
	private java.lang.String RequestBodyJSON;

	public Request_Modify_Converse(IContext context, IMendixObject Request, java.lang.String RequestBodyJSON)
	{
		super(context);
		this.__Request = Request;
		this.RequestBodyJSON = RequestBodyJSON;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		this.Request = this.__Request == null ? null : genaicommons.proxies.Request.initialize(getContext(), __Request);

		// BEGIN USER CODE
		try {
			requireNonNull(this.RequestBodyJSON, "RequestBody JSON is required");
        // Initialize ObjectMapper with full request body as exported from Request
			ObjectNode rootNode = (ObjectNode) MAPPER.readTree(RequestBodyJSON);
			
			removeSystemPromptIfEmpty(rootNode);
			updateMessages(rootNode);
			ConverseFunctionCalling.addToolConfig(rootNode);
			
			return MAPPER.writeValueAsString(rootNode);

			} catch (Exception e) {
				LOGGER.error(e, "An error occurred while modifying Converse Request body.");
				throw e;
			}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Request_Modify_Converse";
	}

	// BEGIN EXTRA CODE
	private static final MxLogger LOGGER = new MxLogger(Request_Modify_Converse.class);
	private static final ObjectMapper MAPPER = new ObjectMapper();
	
	
	private void updateMessages(JsonNode rootNode)throws Exception {
		//Get messages node
		JsonNode messagesNode = rootNode.path("messages");
		
		//Loop over all messages
		for (int i = 0; i < messagesNode.size(); i++) {
            JsonNode messageNode = messagesNode.get(i);
			//Function Calling mapping tool messages
			ConverseFunctionCalling.setToolResult(messageNode,messagesNode,i);
			
            //If a fileCollection has been added add new ContentBlock
            updateFileContentMessages(messageNode);
        }
		//Update messages within rootNode
		((ObjectNode) rootNode).set("messages", messagesNode);
	}
	
	//If there is a FileCollection and FileContent attached to a message, the ContentBlock is added
	private void updateFileContentMessages(JsonNode messageNode)throws URISyntaxException, MalformedURLException, IOException {
		JsonNode fileCollectionNode = messageNode.path("fileCollection");
		if(fileCollectionNode == null || fileCollectionNode .size() == 0) {
			return;
		}
		
		//Loop over FileCollection using FileContent
		for (JsonNode fileContent : fileCollectionNode) {
			JsonNode contentNode = messageNode .path("content");
			
			if (fileContent.path("filetype") != null && fileContent.path("fileType").asText().equals(ENUM_FileType.image.toString()))	{
				ObjectNode imageNode = MAPPER.createObjectNode();
				ConverseVision.setImageFormat(imageNode,fileContent);
				ObjectNode sourceNode = MAPPER.createObjectNode();
				ConverseVision.setImageBytes(sourceNode, fileContent);
				imageNode.set("source", sourceNode);
				
				ObjectNode imageWrapper = MAPPER.createObjectNode();
				imageWrapper.set("image", imageNode);
				
				((ArrayNode) contentNode).add(imageWrapper);
			}
		}	
		//FileCollection node no longer needed
		((ObjectNode)messageNode).remove("fileCollection");
	}
	
	//Removes system prompt node if empty (system prompt is not required)
	private void removeSystemPromptIfEmpty(JsonNode rootNode) {
		if (rootNode.has("system")) {
            JsonNode systemNode = rootNode.get("system").get(0);
            if (systemNode != null && (systemNode).size() == 0) {
                ((ObjectNode) rootNode).remove("system");
            }
		}
	}

	
	// END EXTRA CODE
}
