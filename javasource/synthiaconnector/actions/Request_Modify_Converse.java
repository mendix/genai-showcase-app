// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package synthiaconnector.actions;

import static java.util.Objects.requireNonNull;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import synthiaconnector.impl.MxLogger;
import synthiaconnector.impl.ConverseVision;
import synthiaconnector.impl.ConverseFunctionCalling;

public class Request_Modify_Converse extends CustomJavaAction<java.lang.String>
{
	private IMendixObject __Request;
	private genaicommons.proxies.Request Request;
	private java.lang.String RequestBodyJSON;

	public Request_Modify_Converse(IContext context, IMendixObject Request, java.lang.String RequestBodyJSON)
	{
		super(context);
		this.__Request = Request;
		this.RequestBodyJSON = RequestBodyJSON;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		this.Request = this.__Request == null ? null : genaicommons.proxies.Request.initialize(getContext(), __Request);

		// BEGIN USER CODE
		try {
			requireNonNull(this.RequestBodyJSON, "RequestBody JSON is required");
			requireNonNull(this.Request, "Request object is required");
			ObjectNode rootNode = (ObjectNode) MAPPER.readTree(RequestBodyJSON);
			
			//System prompt node needs to be removed if empty
			removeSystemPromptIfEmpty(rootNode);
			//Add image for vision or ToolResults/ToolUse for function calling
			updateMessages(rootNode);
			//ToolConfig describes the available functions/tools to the model
			ConverseFunctionCalling.addToolConfig(rootNode);
			
			return MAPPER.writeValueAsString(rootNode);

			} catch (Exception e) {
				LOGGER.error(e, "An error occurred while modifying Converse Request body.");
				throw e;
			}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Request_Modify_Converse";
	}

	// BEGIN EXTRA CODE
	private static final MxLogger LOGGER = new MxLogger(Request_Modify_Converse.class);
	private static final ObjectMapper MAPPER = new ObjectMapper();
	
	
	private void updateMessages(ObjectNode rootNode)throws Exception {
		ArrayNode messagesNode = (ArrayNode) rootNode.path("messages");
		
		for (int i = 0; i < messagesNode.size(); i++) {
            JsonNode messageNode = messagesNode.get(i);
			//Map "tool" messages to Converse ToolResult
			ConverseFunctionCalling.setToolResult(messagesNode,i,getContext(),Request);
			
            //If a fileCollection has been added, add a new Converse ContentBlock
            updateFileContentMessages(messageNode);
        }
		//Update messages of rootNode
		rootNode.set("messages", messagesNode);
	}
	
	//If there is a FileCollection and FileContent attached to a message, the ContentBlock is added
	private void updateFileContentMessages(JsonNode messageNode)throws URISyntaxException, MalformedURLException, IOException {
		JsonNode fileCollectionNode = messageNode.path("fileCollection");
		if(fileCollectionNode == null || fileCollectionNode .size() == 0) {
			return;
		}
		ConverseVision.mapToConverseVision(fileCollectionNode,messageNode);
	}
	
	//Removes system prompt node if empty (system prompt is not required, but can't be null)
	private void removeSystemPromptIfEmpty(JsonNode rootNode) {
		if (rootNode.has("system")) {
            JsonNode systemNode = rootNode.get("system").get(0);
            if (systemNode != null && (systemNode).size() == 0) {
                ((ObjectNode) rootNode).remove("system");
            }
		}
	}
	// END EXTRA CODE
}
