// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package embeddings_clustering.actions;

import java.util.List;
import java.util.stream.Collectors;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import embeddings_clustering.impl.VectorEmbedding;
import embeddings_clustering.impl.VectorEmbeddingUtils;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import pl.ksitarski.simplekmeans.KMeansBuilder;
import pl.ksitarski.simplekmeans.KMeansCluster;
import pl.ksitarski.simplekmeans.KMeans;

/**
 * k-means algorithm to identify and assign a predetermined number of clusters to a set of vectors.
 * Clustering can help discover valuable, hidden groupings within the data.
 */
public class JA_KMeans_Simple extends CustomJavaAction<java.lang.Void>
{
	private java.util.List<IMendixObject> __EmbeddingList;
	private java.util.List<embeddings_clustering.proxies.Embedding> EmbeddingList;
	private java.lang.Long NumberOfClusters;
	private java.lang.Long Iterations;

	public JA_KMeans_Simple(IContext context, java.util.List<IMendixObject> EmbeddingList, java.lang.Long NumberOfClusters, java.lang.Long Iterations)
	{
		super(context);
		this.__EmbeddingList = EmbeddingList;
		this.NumberOfClusters = NumberOfClusters;
		this.Iterations = Iterations;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		this.EmbeddingList = java.util.Optional.ofNullable(this.__EmbeddingList)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(__EmbeddingListElement -> embeddings_clustering.proxies.Embedding.initialize(getContext(), __EmbeddingListElement))
			.collect(java.util.stream.Collectors.toList());

		// BEGIN USER CODE
		
		// TODO replace by validation
		int numberClusters = this.NumberOfClusters != null ? this.NumberOfClusters.intValue() : 3;
		int iterations = this.Iterations != null ? this.Iterations.intValue() : 200;
		List<VectorEmbedding> vectors = VectorEmbeddingUtils.getVectorEmbeddingList(EmbeddingList, getContext());
		
		// Initialize the Kmeans object to calculate clusters
		KMeans<VectorEmbedding> kmeans = new KMeansBuilder<VectorEmbedding>(vectors, // input points
				numberClusters, // result count
				input -> { // function that generates mean from given list of points
					return VectorEmbeddingUtils.calculateMean(input);
				}, 
				(vectorEmbeddingLeft, vectorEmbeddingRight) -> { // function that returns distance between two points
					return VectorEmbeddingUtils.calculateCosineDistance(vectorEmbeddingLeft, vectorEmbeddingRight);	
				} 
		).build();

		// Calculate the centroids
		kmeans.iterate(iterations); 

		// Retrieve the results
		List<KMeansCluster<VectorEmbedding>> clusters = kmeans.getClusters();
		
		// Copy the resulting cluster assignments to the MxObjects
		for (KMeansCluster<VectorEmbedding> cluster : clusters) {
			cluster.getPoints().forEach(e -> {
				EmbeddingList.stream().filter(x -> x.getMendixObject().getId().toLong() == e.getIdentifier())
						.collect(Collectors.toList()).get(0).setCluster(getContext(), clusters.indexOf(cluster));
			});
		}

		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_KMeans_Simple";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
