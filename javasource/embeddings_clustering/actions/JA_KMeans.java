// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package embeddings_clustering.actions;

import java.util.LinkedList;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import embeddings_clustering.impl.KMeans;
import embeddings_clustering.impl.clusteringUtils;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * k-means algorithm to identify and assign a predetermined number of clusters to a set of vectors.
 * Clustering can help discover valuable, hidden groupings within the data.
 */
public class JA_KMeans extends CustomJavaAction<java.lang.Void>
{
	private java.util.List<IMendixObject> __EmbeddingList;
	private java.util.List<embeddings_clustering.proxies.Embedding> EmbeddingList;
	private java.lang.Long NumberOfClusters;

	public JA_KMeans(IContext context, java.util.List<IMendixObject> EmbeddingList, java.lang.Long NumberOfClusters)
	{
		super(context);
		this.__EmbeddingList = EmbeddingList;
		this.NumberOfClusters = NumberOfClusters;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		this.EmbeddingList = java.util.Optional.ofNullable(this.__EmbeddingList)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(__EmbeddingListElement -> embeddings_clustering.proxies.Embedding.initialize(getContext(), __EmbeddingListElement))
			.collect(java.util.stream.Collectors.toList());

		// BEGIN USER CODE
		int k = this.NumberOfClusters != null ? this.NumberOfClusters.intValue() : 3;
		double[][] points = clusteringUtils.getEmbeddingsAsDoubles(EmbeddingList, getContext());
		
		
		//calculate clusters
		KMeans clustering = new KMeans.Builder(k, points)
				.iterations(50)
				.pp(true)
				.epsilon(.001)
				.useEpsilon(true)
				.useL1norm(true)
				.build();   
		
		//get result into integer array
		int[] assignments = clustering.getAssignment();
                
		//map result onto Mendix objects
		EmbeddingList.forEach((embedding) -> {
			int i = EmbeddingList.indexOf(embedding);
			embedding.setCluster(getContext(), assignments[i]);
			}
		);
		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_KMeans";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
