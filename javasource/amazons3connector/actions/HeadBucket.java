// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package amazons3connector.actions;

import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import static java.util.Objects.requireNonNull;
import amazons3connector.impl.AmazonS3Client;
import amazons3connector.impl.MxLogger;
import amazons3connector.proxies.ENUM_StorageClass;
import amazons3connector.proxies.HeadBucketResponse;
import awsauthentication.proxies.ENUM_Region;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.endpoints.internal.Value.Bool;
import software.amazon.awssdk.services.s3.model.NoSuchBucketException;

/**
 * You can use the HeadBucket operation to retrieve the AWS Region the bucket is located and determine if a bucket exists and if you have permission to access it. Additionally, it will indicate whether the bucket name used in the request is an access point alias.
 * 
 * All parameters are required.
 * - AWS_Region (Enumeration)
 * - GetObjectRequest (Object)
 * - Credentials (Object)
 */
public class HeadBucket extends CustomJavaAction<IMendixObject>
{
	private IMendixObject __Credentials;
	private awsauthentication.proxies.Credentials Credentials;
	private IMendixObject __HeadBucketRequest;
	private amazons3connector.proxies.HeadBucketRequest HeadBucketRequest;
	private awsauthentication.proxies.ENUM_Region Region;

	public HeadBucket(IContext context, IMendixObject Credentials, IMendixObject HeadBucketRequest, java.lang.String Region)
	{
		super(context);
		this.__Credentials = Credentials;
		this.__HeadBucketRequest = HeadBucketRequest;
		this.Region = Region == null ? null : awsauthentication.proxies.ENUM_Region.valueOf(Region);
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		this.Credentials = this.__Credentials == null ? null : awsauthentication.proxies.Credentials.initialize(getContext(), __Credentials);

		this.HeadBucketRequest = this.__HeadBucketRequest == null ? null : amazons3connector.proxies.HeadBucketRequest.initialize(getContext(), __HeadBucketRequest);

		// BEGIN USER CODE
		software.amazon.awssdk.services.s3.model.HeadBucketResponse awsResponse = null;
		try {
			// Validation of input parameters
			requireNonNull(this.Credentials, "AWS Credentials are required.");
			requireNonNull(this.HeadBucketRequest, "HeadBucketRequest is required.");
			requireNonNull(this.Region, "AWS Region is required.");
			
			// Validation of the HeadBucketRequest object
			validateRequest();
			
			// Building the AWS HeadBucketRequest
			software.amazon.awssdk.services.s3.model.HeadBucketRequest awsRequest = createAWSRequest();
			
			// Log the request
			LOGGER.debug("AWS request:", awsRequest);
			
			// Client creation
			S3Client client = AmazonS3Client.getS3Client(Credentials, Region, HeadBucketRequest);
			
			// Invoke action on AWS client
			awsResponse = client.headBucket(awsRequest);
			
			// Log the response
			LOGGER.debug("AWS response:", awsResponse);
			
			//Mapping response to Mx objects
			amazons3connector.proxies.HeadBucketResponse MxResponse = mapResponseToMxObject(awsResponse);
			LOGGER.debug("MxResponse:", MxResponse);
			return MxResponse.getMendixObject();
		}
		catch (NoSuchBucketException e) {
			LOGGER.error("The specified bucket (" + HeadBucketRequest.getBucketName() + ") cannot be located in the specified region (" + Region + ")");
			throw e;
		}
		catch (Exception e) {
			LOGGER.error(e.getMessage());
			throw e;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "HeadBucket";
	}

	// BEGIN EXTRA CODE
	private static final MxLogger LOGGER = new MxLogger(HeadBucket.class);
	
	private void validateRequest() throws CoreException {	
		// Validate bucket name 
		requireNonNull(HeadBucketRequest.getBucketName(), "Bucket name is required.");
		if (HeadBucketRequest.getBucketName().isBlank()) {
			throw new IllegalArgumentException("Bucket name cannot be blank.");
		}
	}
	
	private software.amazon.awssdk.services.s3.model.HeadBucketRequest createAWSRequest() {
		software.amazon.awssdk.services.s3.model.HeadBucketRequest awsRequest = software.amazon.awssdk.services.s3.model.HeadBucketRequest.builder()
			.bucket(HeadBucketRequest.getBucketName())
			.build();
		return awsRequest;
	}

	private HeadBucketResponse mapResponseToMxObject(software.amazon.awssdk.services.s3.model.HeadBucketResponse awsResponse){
		HeadBucketResponse mxResponse = new HeadBucketResponse(getContext());
		mxResponse.setRegion(getRegionEnumValue(awsResponse.sdkHttpResponse().firstMatchingHeader("x-amz-bucket-region").get()));
		mxResponse.setAccessPointAlias(Boolean.parseBoolean(awsResponse.sdkHttpResponse().firstMatchingHeader("x-amz-access-point-alias").get()));
		return mxResponse;
	}

	// String to ENUM_Region AWS Region Enumeration value
	private ENUM_Region getRegionEnumValue(String region) {
		switch (region) {
			case "af-south-1":
				return ENUM_Region.af_south_1;
			case "ap-east-1":
				return ENUM_Region.ap_east_1;
			case "ap-south-1":
				return ENUM_Region.ap_south_1;
			case "ap-south-2":
				return ENUM_Region.ap_south_2;
			case "ap-southeast-1":
				return ENUM_Region.ap_southeast_1;
			case "ap-southeast-2":
				return ENUM_Region.ap_southeast_2;
			case "ap-southeast-3":
				return ENUM_Region.ap_southeast_3;
			case "ap-southeast-4":
				return ENUM_Region.ap_southeast_4;
			case "ap-northeast-1":
				return ENUM_Region.ap_northeast_1;
			case "ap-northeast-2":
				return ENUM_Region.ap_northeast_2;
			case "ap-northeast-3":
				return ENUM_Region.ap_northeast_3;
			case "ca-central-1":
				return ENUM_Region.ca_central_1;
			case "eu-central-1":
				return ENUM_Region.eu_central_1;
			case "eu-central-2":
				return ENUM_Region.eu_central_2;
			case "eu-west-1":
				return ENUM_Region.eu_west_1;
			case "eu-west-2":
				return ENUM_Region.eu_west_2;
			case "eu-west-3":
				return ENUM_Region.eu_west_3;
			case "eu-north-1":
				return ENUM_Region.eu_north_1;
			case "eu-south-1":
				return ENUM_Region.eu_south_1;
			case "eu-south-2":
				return ENUM_Region.eu_south_2;
			case "il-central-1":
				return ENUM_Region.il_central_1;
			case "me-central-1":
				return ENUM_Region.me_central_1;
			case "me-south-1":
				return ENUM_Region.me_south_1;
			case "sa-east-1":
				return ENUM_Region.sa_east_1;
			case "us-east-1":
				return ENUM_Region.us_east_1;
			case "us-east-2":
				return ENUM_Region.us_east_2;
			case "us-west-1":
				return ENUM_Region.us_west_1;
			case "us-west-2":
				return ENUM_Region.us_west_2;
			case "us-gov-east-1":
				return ENUM_Region.us_gov_east_1;
			case "us-gov-west-1":
				return ENUM_Region.us_gov_west_1;
			default:
				throw new IllegalArgumentException("Invalid region: " + region);
		}
	}
	// END EXTRA CODE
}
