// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package amazons3connector.actions;

import static java.util.Objects.requireNonNull;
import java.util.Date;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import amazons3connector.impl.AmazonS3Client;
import amazons3connector.impl.MxLogger;
import amazons3connector.proxies.ENUM_StorageClass;
import amazons3connector.proxies.GetObjectResponse;
import amazons3connector.proxies.GetS3ObjectUsage;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.core.ResponseInputStream;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import software.amazon.awssdk.services.s3.model.GetObjectRequest.Builder;
import software.amazon.awssdk.services.s3.model.StorageClass;

public class GetObject extends CustomJavaAction<IMendixObject>
{
	private IMendixObject __Credentials;
	private awsauthentication.proxies.Credentials Credentials;
	private awsauthentication.proxies.ENUM_Region Region;
	private IMendixObject __GetObjectRequest;
	private amazons3connector.proxies.GetObjectRequest GetObjectRequest;
	private IMendixObject __TargetFile;
	private system.proxies.FileDocument TargetFile;

	public GetObject(IContext context, IMendixObject Credentials, java.lang.String Region, IMendixObject GetObjectRequest, IMendixObject TargetFile)
	{
		super(context);
		this.__Credentials = Credentials;
		this.Region = Region == null ? null : awsauthentication.proxies.ENUM_Region.valueOf(Region);
		this.__GetObjectRequest = GetObjectRequest;
		this.__TargetFile = TargetFile;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		this.Credentials = this.__Credentials == null ? null : awsauthentication.proxies.Credentials.initialize(getContext(), __Credentials);

		this.GetObjectRequest = this.__GetObjectRequest == null ? null : amazons3connector.proxies.GetObjectRequest.initialize(getContext(), __GetObjectRequest);

		this.TargetFile = this.__TargetFile == null ? null : system.proxies.FileDocument.initialize(getContext(), __TargetFile);

		// BEGIN USER CODE
		try {
			//Validation of the input parameters
			requireNonNull(this.Credentials, "AWS Credentials are required.");
			requireNonNull(this.Region, "AWS Region is required.");
			requireNonNull(this.GetObjectRequest, "GetObjectRequest is required.");
		
			//validation of the request
			validateRequest();
			
			// Building the AWS GetObjectRequest
			software.amazon.awssdk.services.s3.model.GetObjectRequest awsRequest = createAWSRequest();
		
			// Logging of the request building		
			LOGGER.debug("AWS request:", awsRequest);
			
			// Client creation		
			S3Client client = AmazonS3Client.getS3Client(Credentials, Region, GetObjectRequest);
			ResponseInputStream<software.amazon.awssdk.services.s3.model.GetObjectResponse> awsResponseStream = client.getObject(awsRequest);
			// Logging of the AWS response
			LOGGER.debug("AWS response:", awsResponseStream);
			
			// Creating and committing TargetFile
			createMxSystemFileObject(awsResponseStream, TargetFile);
	
			//Mapping response to Mx objects
			amazons3connector.proxies.GetObjectResponse MxResponse = mapResponseToMxObject(awsResponseStream);
			LOGGER.debug("MxResponse:", MxResponse);
			return MxResponse.getMendixObject();			
		}
		catch (Exception e) {
			LOGGER.error(e.getMessage());
			throw e;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "GetObject";
	}

	// BEGIN EXTRA CODE
	private static final MxLogger LOGGER = new MxLogger(GetObject.class);

	private void validateRequest() throws CoreException {
		// Validate name
		requireNonNull(GetObjectRequest.getBucketName(), "Bucket name is required");
		if (GetObjectRequest.getBucketName().isBlank()) {
			throw new IllegalArgumentException("Bucket name cannot be empty or blank");
		}
		requireNonNull(GetObjectRequest.getKey(), "Key name is required");
		if (GetObjectRequest.getKey().isBlank()) {
			throw new IllegalArgumentException("Key cannot be empty or blank");
		}
	}

	private software.amazon.awssdk.services.s3.model.GetObjectRequest createAWSRequest() {Builder awsRequestBuilder = software.amazon.awssdk.services.s3.model.GetObjectRequest.builder()
				.bucket(GetObjectRequest.getBucketName())
				.key(GetObjectRequest.getKey());
		return awsRequestBuilder.build();
	}

	private void createMxSystemFileObject(ResponseInputStream<software.amazon.awssdk.services.s3.model.GetObjectResponse> awsResponseStream, system.proxies.FileDocument TargetFile) throws CoreException {
		String fileName = GetObjectRequest.getKey().substring(GetObjectRequest.getKey().lastIndexOf('/') + 1);
		
		TargetFile.setDeleteAfterDownload(true);
		Core.storeFileDocumentContent(getContext(), TargetFile.getMendixObject(), fileName, awsResponseStream);
		TargetFile.commit(getContext());
	}

	private GetObjectResponse mapResponseToMxObject(ResponseInputStream<software.amazon.awssdk.services.s3.model.GetObjectResponse> awsResponseStream) {

		GetObjectResponse mxResponse = new GetObjectResponse(getContext());
		GetS3ObjectUsage mxGetS3ObjectUsage = new GetS3ObjectUsage(getContext());
		software.amazon.awssdk.services.s3.model.GetObjectResponse awsResponse = awsResponseStream.response();

		String fileName = GetObjectRequest.getKey().substring(GetObjectRequest.getKey().lastIndexOf('/') + 1);
		java.util.Date LastModified = Date.from(awsResponse.lastModified());

		if (!(awsResponse.storageClass() == null)) {
			ENUM_StorageClass StorageClass = getStorageClassEnumValue(awsResponse.storageClass());
			mxGetS3ObjectUsage.setStorageClass(StorageClass);
		}
		mxGetS3ObjectUsage.setETag(awsResponse.eTag());
		mxGetS3ObjectUsage.setKey(fileName);
		mxGetS3ObjectUsage.setLastModified(LastModified);
		mxGetS3ObjectUsage.setSize(awsResponse.contentLength());

		mxResponse.setGetObjectResponse_GetS3ObjectUsage(mxGetS3ObjectUsage);
		return mxResponse;
	}

	private ENUM_StorageClass getStorageClassEnumValue(StorageClass storageClass) {
		switch (storageClass) {
		case DEEP_ARCHIVE:
			return ENUM_StorageClass.DEEP_ARCHIVE;
		case GLACIER:
			return ENUM_StorageClass.GLACIER;
		case GLACIER_IR:
			return ENUM_StorageClass.GLACIER_IR;
		case INTELLIGENT_TIERING:
			return ENUM_StorageClass.INTELLIGENT_TIERING;
		case ONEZONE_IA:
			return ENUM_StorageClass.ONEZONE_IA;
		case OUTPOSTS:
			return ENUM_StorageClass.OUTPOSTS;
		case REDUCED_REDUNDANCY:
			return ENUM_StorageClass.REDUCED_REDUNDANCY;
		case SNOW:
			return ENUM_StorageClass.SNOW;
		case STANDARD:
			return ENUM_StorageClass.STANDARD;
		case STANDARD_IA:
			return ENUM_StorageClass.STANDARD_IA;
		default:
			LOGGER.debug("A storage class unknown to the SDK has been returned.");
			return ENUM_StorageClass.UNKNOWN_TO_SDK_VERSION;
		}
	}
	// END EXTRA CODE
}
