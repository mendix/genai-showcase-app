// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package amazons3connector.actions;

import static java.util.Objects.requireNonNull;
import java.util.Date;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import amazons3connector.impl.AmazonS3Client;
import amazons3connector.impl.MxLogger;
import amazons3connector.proxies.ENUM_StorageClass;
import amazons3connector.proxies.ListObjectsResponse;
import amazons3connector.proxies.ListedObject;
import amazons3connector.proxies.CommonPrefix;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.ListObjectsV2Response;
import software.amazon.awssdk.services.s3.model.ObjectStorageClass;

public class ListObjects extends CustomJavaAction<IMendixObject>
{
	private IMendixObject __ListObjectsRequest;
	private amazons3connector.proxies.ListObjectsRequest ListObjectsRequest;
	private awsauthentication.proxies.ENUM_Region Region;
	private IMendixObject __Credentials;
	private awsauthentication.proxies.Credentials Credentials;

	public ListObjects(IContext context, IMendixObject ListObjectsRequest, java.lang.String Region, IMendixObject Credentials)
	{
		super(context);
		this.__ListObjectsRequest = ListObjectsRequest;
		this.Region = Region == null ? null : awsauthentication.proxies.ENUM_Region.valueOf(Region);
		this.__Credentials = Credentials;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		this.ListObjectsRequest = this.__ListObjectsRequest == null ? null : amazons3connector.proxies.ListObjectsRequest.initialize(getContext(), __ListObjectsRequest);

		this.Credentials = this.__Credentials == null ? null : awsauthentication.proxies.Credentials.initialize(getContext(), __Credentials);

		// BEGIN USER CODE
		ListObjectsV2Response awsResponse = null;
		try {	
			// Validation of input parameters
			requireNonNull(this.Credentials, "AWS Credentials are required.");
			requireNonNull(this.Region, "AWS Region is required.");
			requireNonNull(this.ListObjectsRequest, "ListObjectsRequest is required.");
			// Validation of the PutObjectRequest object
			validateRequest();
			// Building the AWS ListObjectsRequest
			software.amazon.awssdk.services.s3.model.ListObjectsV2Request awsRequest = createAWSRequest();
			// Logging of the built request
			LOGGER.debug("AWS request:", awsRequest);
			// Client creation
			S3Client client = AmazonS3Client.getS3Client(Credentials, Region, ListObjectsRequest);
			// Invoke action on AWS client
			awsResponse = client.listObjectsV2(awsRequest);
			// Log the response
			LOGGER.debug("AWS response:", awsResponse);
		}
		catch (Exception e) {
			LOGGER.error(e.getMessage());
			throw e;
		}
		// Determine return value
		return createMxResponse(awsResponse).getMendixObject();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ListObjects";
	}

	// BEGIN EXTRA CODE
	private static final MxLogger LOGGER = new MxLogger(PutObject.class);
	
	private void validateRequest() throws CoreException {	
		// Validate BucketName
		requireNonNull(ListObjectsRequest.getBucketName(), "Bucket name is required");
		if (ListObjectsRequest.getBucketName().isBlank()) {
			throw new IllegalArgumentException("Bucket name cannot be blank");
		} 

	}
	
	private software.amazon.awssdk.services.s3.model.ListObjectsV2Request createAWSRequest() {
		software.amazon.awssdk.services.s3.model.ListObjectsV2Request.Builder awsRequestBuilder = software.amazon.awssdk.services.s3.model.ListObjectsV2Request.builder()
				.bucket(ListObjectsRequest.getBucketName());
		// Setting optional parameters
		if (ListObjectsRequest.getDelimiter() != null) {
			awsRequestBuilder.delimiter(this.ListObjectsRequest.getDelimiter());
		}
		if (ListObjectsRequest.getMaxKeys() != null) {
			awsRequestBuilder.maxKeys(this.ListObjectsRequest.getMaxKeys());
		}
		if (ListObjectsRequest.getPrefix() != null) {
			awsRequestBuilder.prefix(this.ListObjectsRequest.getPrefix());
		}
		if (ListObjectsRequest.getContinuationToken() != null) {
			awsRequestBuilder.continuationToken(this.ListObjectsRequest.getContinuationToken());
		}
		if (ListObjectsRequest.getStartAfter() != null) {
			awsRequestBuilder.startAfter(this.ListObjectsRequest.getStartAfter());
		}
		return awsRequestBuilder.build();
	}
	
	private ListObjectsResponse createMxResponse(ListObjectsV2Response awsResponse) {
		ListObjectsResponse mxResponse = new ListObjectsResponse(getContext());
		mxResponse.setIsTruncated(awsResponse.isTruncated());
		mxResponse.setKeyCount(awsResponse.keyCount());
		mxResponse.setNextContinuationToken(awsResponse.continuationToken());
		awsResponse.contents().forEach(awsS3Object -> createMxListedObject(mxResponse, awsS3Object));
		awsResponse.commonPrefixes().forEach(awsCommonPrefix -> createMxCommonPrefix(mxResponse, awsCommonPrefix));
		return mxResponse;
	}
	
	private void createMxListedObject(ListObjectsResponse mxResponse, software.amazon.awssdk.services.s3.model.S3Object awsS3Object) {
		ListedObject mxS3Object = new ListedObject(getContext());
		mxS3Object.setETag(awsS3Object.eTag());
		mxS3Object.setKey(awsS3Object.key());
		mxS3Object.setLastModified(Date.from(awsS3Object.lastModified()));
		mxS3Object.setSize(awsS3Object.size());
		mxS3Object.setStorageClass(getMxStorageClassENUM(awsS3Object.storageClass()));
		mxS3Object.setListedObject_ListObjectsResponse(mxResponse);
	}
	
	private void createMxCommonPrefix(ListObjectsResponse mxResponse, software.amazon.awssdk.services.s3.model.CommonPrefix awsCommonPrefix) {
		CommonPrefix mxCommonPrefix = new CommonPrefix(getContext());
		mxCommonPrefix.setPrefix(awsCommonPrefix.prefix());
		mxCommonPrefix.setCommonPrefix_ListObjectsResponse(mxResponse);
	}
	
	private ENUM_StorageClass getMxStorageClassENUM(ObjectStorageClass awsStorageClass) {
		switch (awsStorageClass) {
			case DEEP_ARCHIVE:
				return ENUM_StorageClass.DEEP_ARCHIVE;
			case GLACIER:
				return ENUM_StorageClass.GLACIER;
			case GLACIER_IR:
				return ENUM_StorageClass.GLACIER_IR;
			case INTELLIGENT_TIERING:
				return ENUM_StorageClass.INTELLIGENT_TIERING;
			case ONEZONE_IA:
				return ENUM_StorageClass.ONEZONE_IA;
			case OUTPOSTS:
				return ENUM_StorageClass.OUTPOSTS;
			case REDUCED_REDUNDANCY:
				return ENUM_StorageClass.REDUCED_REDUNDANCY;
			case STANDARD:
				return ENUM_StorageClass.STANDARD;
			case STANDARD_IA:
				return ENUM_StorageClass.STANDARD_IA;
			case UNKNOWN_TO_SDK_VERSION:
				return ENUM_StorageClass.UNKNOWN_TO_SDK_VERSION;
			default:
				return ENUM_StorageClass.UNKNOWN_TO_SDK_VERSION;
		}
	}
	// END EXTRA CODE
}
